# -*- coding: utf-8 -*-
"""Prediction Using Unsupervised Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uAtKey5m-SRYTc2E2CYE4DLr2gGQ9LCM

The Spark Foundation - Data Science & Business Analytics Internship 

Author - Manjiri Anil Bhavsar 

Batch - March 2022

Task 2 - Prediction Using Unsupervised Machine Learning
"""

import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn import datasets

#Load the iris datasetv
iris = datasets.load_iris()
iris_data = pd.DataFrame(iris.data, columns = iris.feature_names)
iris_data.head() #first 5 rows

iris_data.shape

iris_data.size

iris_data.describe()

iris_data.isnull().sum()

# checking for not null values.
iris_data.notnull().sum()

iris_data.info()

# finding the optimum number of clusters for k-means classification 

x = iris_data.iloc[:,[0, 1, 2, 3]].values
from sklearn.cluster import KMeans
wcss = []

for i in range(1, 11):
  kmeans = KMeans(n_clusters = i, init = 'k-means++',
                  max_iter = 300, n_init = 10, random_state = 0)
  kmeans.fit(x)
  wcss.append(kmeans.inertia_)

#plotting the results onto a line graph,
#allowing us to observe 'The elbow'
plt.plot(range(1, 11), wcss)
plt.title('The elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('wcss')# within cluster sum of squares
plt.show()

#we can clearly see why it is called 'The elbow method' from the above graph

# applying kmeans to the dataset
kmeans = KMeans(n_clusters = 3, init = 'k-means++',
                max_iter = 300, n_init = 10, random_state=0)
y_kmeans = kmeans.fit_predict(x)

#visualising the clusters - on the firts two columns
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1],
            s = 100, c = 'green', label = 'Iris-setosa')
plt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1],
            s = 100, c = 'blue', label = 'Iris-versicolour')
plt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1],
            s = 100, c = 'red', label = 'Iris-virginica')

#Ploting the centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1],
            s = 100, c = 'yellow', label = 'centroids')
plt.legend()